@using IceProducts.Shared.InputModels;


<div class="container">
    <h2 class="display-4 fw-bold text-center p-2">
        Contact
    </h2>
 
    <div class="row" data-aos="fade-up" >

        <div class="col-lg-5 d-flex align-items-stretch">
            <div class="info">
                <div class="address">
                    <i class="bi bi-geo-alt"></i>
                    <h4>Location:</h4>
                    <p>A108 Adam Street, New York, NY 535022</p>
                </div>

                <div class="email">
                    <i class="bi bi-envelope"></i>
                    <h4>Email:</h4>
                    <p>info@example.com</p>
                </div>

                <div class="phone">
                    <i class="bi bi-phone"></i>
                    <h4>Call:</h4>
                    <p>+1 5589 55488 55s</p>
                </div>

                <iframe src="https://www.google.com/maps/embed?pb=!1m14!1m8!1m3!1d12097.433213460943!2d-74.0062269!3d40.7101282!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x0%3A0xb89d1fe6bc499443!2sDowntown+Conference+Center!5e0!3m2!1smk!2sbg!4v1539943755621"
                        frameborder="0" style="border:0; width: 100%; height: 290px;" allowfullscreen></iframe>
            </div>

        </div>

        <div class="col-lg-7 mt-5 mt-lg-0 d-flex align-items-stretch">
            <EditForm Model="@ContactUsInputModel" OnValidSubmit="SendEmail" class="contact-us-form">

                <DataAnnotationsValidator/>

                <div class="row">
                    <div class="form-group col-md-6">
                        <label for="name">Your Name</label>
                        <InputText @bind-Value="ContactUsInputModel.Name"  class="form-control" id="name"></InputText>
                        <ValidationMessage For="() => ContactUsInputModel.Name"></ValidationMessage>   
                    </div>
                    <div class="form-group col-md-6 mt-3 mt-md-0">
                        <label for="name">Your Email</label>
                        <InputText @bind-Value="ContactUsInputModel.EmailAddress" class="form-control" id="email" ></InputText>
                        <ValidationMessage For="() => ContactUsInputModel.EmailAddress"></ValidationMessage>
                    </div>
                </div>
                <div class="form-group mt-3">
                    <label for="name">Subject</label>
                    <InputText @bind-Value="ContactUsInputModel.Subject" class="form-control" id="subject"></InputText>
                    <ValidationMessage For="() => ContactUsInputModel.Subject"></ValidationMessage>
                </div>
                <div class="form-group mt-3">
                    <label for="name">Message</label>
                    <InputTextArea @bind-Value="ContactUsInputModel.Message" class="form-control" rows="10"></InputTextArea>
                    <ValidationMessage For="() => ContactUsInputModel.Message"></ValidationMessage>

                </div>

                <div class="text-center">
                    <button type="submit" disabled="@_isSending">
                        @if (_isSending)
                        {
                            <span class="simple-loader"></span>
                        }
                        else
                        {
                            <span>send message</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>

    </div>

</div>

@code {
    [Parameter]
    public ContactUsInputModel ContactUsInputModel { get; set; } = new ContactUsInputModel();

    [Inject]
    public HttpClient HttpRequest { get; set; }
    [Inject]
    public ISnackbar Snackbar { get; set; }

    private bool _disableSubmit = false;
    private bool _isSending = false;

    private async Task SendEmail()
    {
        _disableSubmit = true;
        _isSending = true;

        string apiPath = "api/email";
        var response = await HttpRequest.PostAsJsonAsync(apiPath, ContactUsInputModel);


        if(response.IsSuccessStatusCode)
        {
            Snackbar.Add("Message Successfully Sent!", Severity.Success);
        }
        else
        {
            var apiContent = await response.Content.ReadFromJsonAsync<BaseResponse>();
            Snackbar.Add(apiContent?.Message, Severity.Warning);
        }

        _disableSubmit = false;
        _isSending = false;
        ClearInput();
    }

    private void ClearInput()
    {
        ContactUsInputModel.Subject = "";
        ContactUsInputModel.Message = "";
        ContactUsInputModel.Name = "";
        ContactUsInputModel.EmailAddress = "";
    }

}

@using IceProducts.Shared.Dtos;
@using IceProducts.Shared.InputModels;
@using IceProducts.Shared.Responses;
@using Microsoft.AspNetCore.Http;
<EditForm class="form p-2" Model="Product" OnValidSubmit="Create">
<MudDialog>
    
    <DialogContent>

        <div style="text-align: center; padding: 20px;">
            <h3 style="margin: 0;">Add Product</h3>
        </div>
            <InputText style="outline:none;box-shadow:none;" class="form-control p-2" placeholder="Name" id="name" @bind-Value="Product.Name"></InputText>
            <InputText style="outline:none;box-shadow:none;" class="form-control p-2 mt-3" placeholder="Sizes (small,large...) " id="sizes" @bind-Value="Product.Sizes"></InputText>
            <InputText style="outline:none;box-shadow:none;" class="form-control p-2 mt-3" id="description" @bind-Value="Product.SmallDescription" placeholder="small description"></InputText>
            <InputTextArea style="outline:none;box-shadow:none;" class="form-control p-2 mt-3" id="longdescription" placeholder="detailed description" @bind-Value="Product.LongDescription"></InputTextArea>

            <InputFile OnChange="HandleOnChange" class="form-control mt-3" id="image"></InputFile>
           
            @if (errorMessages != null)
            {
                <ul>
                     @* @foreach (var errorMessage in errorMessages) *@
                    {
                        <li></li>
                    }
                </ul>
            }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Disabled="@_isSaving" ButtonType="ButtonType.Submit">
            @if (_isSaving)
            {
                <span>saving..</span>
            }
            else
            {
                <span>Save</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>
</EditForm>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public HashSet<ProductDto> TableProducts { get; set; } = new HashSet<ProductDto>(); 
    [Inject] public HttpClient HttpRequest { get; set; }

    private ProductInputModel Product { get; set; } = new ProductInputModel();
    private static readonly HashSet<string> acceptedExtenstions =
    new HashSet<string> {
            "image/apng",
            "image/bmp",
            "image/gif",
            "image/jpeg",
            "image/pjpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-icon"};

    private string[] errorMessages;

    private bool _disableSubmit = false;
    private bool _isSaving = false;

    void Cancel() => MudDialog.Cancel();


    [Inject]
    public ISnackbar Snackbar{ get; set; }

    private async Task Create()
    {
        _disableSubmit = true;
        _isSaving = true;

        string apiPath = "api/product";
        var response = await HttpRequest.PostAsJsonAsync(apiPath, Product);


        if (response.IsSuccessStatusCode)
        {
            var productDto = await response.Content.ReadFromJsonAsync<ProductDto>();

            //return result to parent
            MudDialog.Close(DialogResult.Ok(productDto));
        }
        else
        {
            //display errors
            var errorResponse = await response.Content.ReadFromJsonAsync<BaseResponse>();

            if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Message))
            {
                errorMessages = errorResponse.Message.Split(';');
                Console.WriteLine(errorMessages.ToString());
            }
        }

        _disableSubmit = false;
        _isSaving = false;
    }

    private async Task HandleOnChange(InputFileChangeEventArgs e)
    {
        if(e.File != null)
        {
            var format = e.File.ContentType;
            int maxWidth = 640;
            int maxheight = 480;

            if (acceptedExtenstions.Contains(format))
            {
                var resizedBrowserFile = await e.File.RequestImageFileAsync(format, maxWidth, maxheight);
                Product.ImageData.Format = format;
                Product.ImageData.Image = await GetImageAsBytes(resizedBrowserFile);
            }
        }
    }

    private async Task<byte[]> GetImageAsBytes(IBrowserFile browserFile)
    {
        var imageAsBytes = new byte[browserFile.Size];
        await browserFile.OpenReadStream().ReadAsync(imageAsBytes);
        return imageAsBytes;
    }

}

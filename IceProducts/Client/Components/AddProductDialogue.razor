@using Blazored.LocalStorage;
@using IceProducts.Client.Classes;
@using IceProducts.Shared.Dtos;
@using IceProducts.Shared.InputModels;
@using IceProducts.Shared.Responses;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.AspNetCore.Http;
@using System.Net.Http.Headers;
@using System.Net;
<EditForm class="form p-2" Model="Product" OnSubmit="Create" >
<MudDialog>

    <DialogContent>

        <div style="text-align: center; padding: 20px;">
            <h3 style="margin: 0;">Add Product</h3>
        </div>
            <MudTextField T="string" Variant="Variant.Outlined" placeholder="Name" id="name" @bind-Value="Product.Name" Required></MudTextField>
             <MudTextField T="string" placeholder="Sizes (small,large...) " id="sizes" @bind-Value="Product.Sizes"  Variant="Variant.Outlined" Required></MudTextField>
            <MudTextField T="string" id="description" @bind-Value="Product.SmallDescription" MaxLength="75" Counter="75" placeholder="small description"  Immediate="true" Variant="Variant.Outlined" Required></MudTextField>
            @if (fieldErrors.ContainsKey("SmallDescription"))
            {
                <div class="text-danger">@fieldErrors["SmallDescription"]</div>
            }
            <MudTextField T="string" id="longdescription" Lines="3" placeholder="detailed description" Immediate="true" @bind-Value="Product.LongDescription" MaxLength="332" Counter="332" Variant="Variant.Outlined" Required></MudTextField>
            @if (fieldErrors.ContainsKey("LongDescription"))
            {
                <div class="text-danger">@fieldErrors["LongDescription"]</div>
            }
            
            <InputFile OnChange="HandleOnChange" class="form-control mt-3" id="image" required></InputFile>
            <span class="m-1 text-danger">@fileTypeError</span>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" Disabled="@_isSaving" ButtonType="ButtonType.Submit">
            @if (_isSaving)
            {
                <span>saving..</span>
            }
            else
            {
                <span>Save</span>
            }
        </MudButton>
    </DialogActions>
</MudDialog>
</EditForm>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public HashSet<ProductDto> TableProducts { get; set; } = new HashSet<ProductDto>(); 

    [Inject] public HttpClient HttpRequest { get; set; }
    [Inject] public AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }

    private ProductInputModel Product { get; set; } = new ProductInputModel();
    private static readonly HashSet<string> acceptedExtenstions =
    new HashSet<string> {
            "image/apng",
            "image/bmp",
            "image/gif",
            "image/jpeg",
            "image/pjpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-icon"};

    private string fileTypeError = string.Empty;
    private Dictionary<string, string> fieldErrors = new Dictionary<string, string>();

    private bool _disableSubmit = false;
    private bool _isSaving = false;

    void Cancel() => MudDialog.Cancel();


    [Inject]
    public ISnackbar Snackbar{ get; set; }

    private async Task Create()
    {
        _disableSubmit = true;
        _isSaving = true;

        string apiPath = "api/product";
        var response = await HttpRequest.PostAsJsonAsync(apiPath, Product);

        if (response.IsSuccessStatusCode)
        {
            var productDto = await response.Content.ReadFromJsonAsync<ProductDto>();
            MudDialog.Close(DialogResult.Ok(productDto));
        }

        //token expired
        else if(response.StatusCode == HttpStatusCode.Unauthorized)
        {
            NavigationManager.NavigateTo("/login");
        }

        else
        {
            fieldErrors.Clear();
            var errorResponse = await response.Content.ReadFromJsonAsync<BaseResponse>();

            if (errorResponse != null && !string.IsNullOrEmpty(errorResponse.Message))
            {
                var errorMessages = errorResponse.Message.Split(Environment.NewLine);

                foreach (var error in errorMessages)
                {
                    var parts = error.Split(':');
                    if (parts.Length == 2)
                    {
                        var fieldName = parts[0].Trim();
                        var errorMessage = parts[1].Trim();
                        fieldErrors[fieldName] = errorMessage;
                    }
                }
            }
        }
        _disableSubmit = false;
        _isSaving = false;
    }

    private async Task HandleOnChange(InputFileChangeEventArgs e)
    {
        fileTypeError = string.Empty;

        if(e.File != null)
        {
            var format = e.File.ContentType;
            int maxWidth = 640;
            int maxheight = 480;

            if (acceptedExtenstions.Contains(format))
            {
                var resizedBrowserFile = await e.File.RequestImageFileAsync(format, maxWidth, maxheight);
                Product.ImageData.Format = format;
                Product.ImageData.Image = await GetImageAsBytes(resizedBrowserFile);
            }
            else
            {
                fileTypeError = "file type not supported";
            }
        }
    }
    private async Task<byte[]> GetImageAsBytes(IBrowserFile browserFile)
    {
        var imageAsBytes = new byte[browserFile.Size];
        await browserFile.OpenReadStream().ReadAsync(imageAsBytes);
        return imageAsBytes;
    }
}

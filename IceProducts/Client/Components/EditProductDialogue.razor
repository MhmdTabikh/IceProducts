@using Blazored.LocalStorage;
@using IceProducts.Shared.Dtos;
@using IceProducts.Shared.InputModels;
@using Microsoft.AspNetCore.Http;
@using System.Net.Http.Headers;
@using System.Net;
<EditForm class="form p-2" Model="TableProduct" OnSubmit="Update" >
    <MudDialog>

        <DialogContent>

            <div class="row d-flex justify-content-center align-items-center">

                <div class="col-6">
                    <ImagePreviewer UniqueFileInputId="TableProduct.Id" OriginalImage="TableProduct.Image"  BindUploadedImageTo="updateProductInput"></ImagePreviewer>
                </div>
                <div class="col-6">
                     <MudTextField T="string" HelperText="Name" Variant="Variant.Text"  id="name" @bind-Value="updateProductInput.Name" Required></MudTextField>
                     <MudTextField T="string" HelperText="Sizes" Variant="Variant.Text"  id="sizes" @bind-Value="updateProductInput.Sizes" Required></MudTextField>
                     <MudTextField T="string" HelperText="Small description" Variant="Variant.Text" Immediate="true" id="description" MaxLength="75" Counter="75" @bind-Value="updateProductInput.SmallDescription"  Required></MudTextField>
                     <MudTextField T="string" HelperText="Detaile description" Variant="Variant.Outlined" Immediate="true" Lines="3" MaxLength="332" Counter="332" id="longdescription"  @bind-Value="updateProductInput.LongDescription" Required></MudTextField>
                </div>
            </div>
           
            <div class="row">

            </div>

        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Disabled="@_isSaving" ButtonType="ButtonType.Submit">
                @if (_isSaving)
                {
                    <span class="simple-loader"></span>
                }
                else
                {
                    <span>Save</span>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</EditForm>

@code {

    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter] public ProductDto TableProduct { get; set; } = new ProductDto();
    [Parameter] public HashSet<ProductDto> TableProducts { get; set; } = new HashSet<ProductDto>();

    [Inject] public HttpClient HttpRequest { get; set; }
    [Inject] public NavigationManager NavigationManager { get; set; }
    [Inject] public ISnackbar Snackbar { get; set; }

    private static readonly HashSet<string> acceptedExtenstions =
    new HashSet<string> {
            "image/apng",
            "image/bmp",
            "image/gif",
            "image/jpeg",
            "image/pjpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-icon"
            };

    public UpdateProductInputModel updateProductInput { get; set; } = new UpdateProductInputModel();
    private bool _disableSubmit = false;
    private bool _isSaving = false;

    private void Cancel() {
        MudDialog.Cancel();
    }


    private async Task Update()
    {
        _disableSubmit = true;
        _isSaving = true;

        string apiPath = $"api/product";
        var response = await HttpRequest.PutAsJsonAsync($"{apiPath}/{TableProduct.Id}", updateProductInput);


        if (response.IsSuccessStatusCode)
        {
            var returnedProduct = new ProductDto
            {
                Id = TableProduct.Id,
                Name = updateProductInput.Name,
                LongDescription = updateProductInput.LongDescription,
                SmallDescription = updateProductInput.SmallDescription,
                Sizes = updateProductInput.Sizes
            };

            if(updateProductInput.ImageData?.Image != null)
            {
                returnedProduct.Image = updateProductInput.ImageData.Image;
            }
            else
            {
                returnedProduct.Image = TableProduct.Image;
            }

            MudDialog.Close(DialogResult.Ok(returnedProduct));
        }
        else
        {
            //token expired
            if(response.StatusCode == HttpStatusCode.Unauthorized)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            // some error occurred
            else
            {
                Snackbar.Add("An error occured please check your inputs or try again later");
            }
        }
        _disableSubmit = false;
        _isSaving = false;
    }


    protected override void OnParametersSet()
    {
        updateProductInput.Name = TableProduct.Name;
        updateProductInput.Sizes = TableProduct.Sizes;
        updateProductInput.SmallDescription = TableProduct.SmallDescription;
        updateProductInput.LongDescription = TableProduct.LongDescription;
    }
}

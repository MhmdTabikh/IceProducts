@using IceProducts.Shared.Dtos;
@using IceProducts.Shared.InputModels;
<div class="custom-file">
    <InputFile accept="img/*" class="custom-file-input opacity-0" style="width:0px; height:0px;" id="@UniqueFileInputId" OnChange="UploadImage"></InputFile>
    <div class="container text-center">
        <label class="custom-file-label" for="@UniqueFileInputId">

             @if(BindUploadedImageTo.ImageData?.Image == null)
            {
              <img src="data:image;base64,@Convert.ToBase64String(OriginalImage)" width="250" style="cursor:pointer; border-radius:5px;"  />
              <br />
             <span class="text-danger" hidden="@isErrorHidden">@errorMessage</span>
            }
            else
            {
                <img src="data:image;base64,@Convert.ToBase64String(BindUploadedImageTo.ImageData.Image)" class="card-img-top product-img" width="120"  style="cursor:pointer;" />
            }
        </label>
    </div>
</div>



<style>
    .product-img {
        border-top-right-radius: 10px;
        border-top-left-radius: 10px;
        border-bottom-left-radius: 5px;
        border-bottom-right-radius: 5px;
    }

</style>

@code {


    [Parameter]
    public byte[] OriginalImage { get; set; } = Array.Empty<byte>();

    [Parameter]
    public UpdateProductInputModel BindUploadedImageTo { get; set; }

    [Parameter]
    public string UniqueFileInputId { get; set; }


    private static readonly HashSet<string> acceptedExtenstions =
    new HashSet<string> {
            "image/apng",
            "image/bmp",
            "image/gif",
            "image/jpeg",
            "image/pjpeg",
            "image/png",
            "image/svg+xml",
            "image/tiff",
            "image/webp",
            "image/x-icon"
                    };

    private string errorMessage = "This file is not appropraite";
    private bool isErrorHidden = true;
    private bool _isOriginalImageHidden = false;

    public async Task UploadImage(InputFileChangeEventArgs importedFile)
    {
        isErrorHidden = true;

        if ((importedFile.File != null))
        {
            string fileType = importedFile.File.ContentType;

            if(acceptedExtenstions.Contains(fileType))
            {
                _isOriginalImageHidden = true;
                var image = await importedFile.File.RequestImageFileAsync(importedFile.File.ContentType, 640, 480);

                BindUploadedImageTo.ImageData = new ImageData
                {
                    Image = await GetImageAsByteArray(image),
                    Format = fileType
                };
            }
            else
            {
                isErrorHidden = false;
            }
        }
        else
        {
            _isOriginalImageHidden = false;
        }

    }

    private static async Task<byte[]> GetImageAsByteArray(IBrowserFile file)
    {
        var imageFile = new byte[file.Size];

        //Max ~10MB
        if (file.Size <= 1024 * 10000)
        {
            await file.OpenReadStream().ReadAsync(imageFile);
        }
        return imageFile;
    }


}
